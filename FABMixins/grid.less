@gridMargin: 5%;
@gridColumns: 8;
@gridSpaceless: false;

/*------------------------------------*\
	# Grid
\*------------------------------------*/

.row (@margin: @gridMargin) when (ispercentage(@margin)) {
	margin-left: (@margin * -1);
	max-width: (100% + @margin);
	.clearfix();
}
.rowModify (@margin: @gridMargin) {
	margin-left: (@margin * -1);
	max-width: (100% + @margin);
}
.rowReset () {
	margin-left: 0;
	max-width: none;
}
.column (...) {
	float: left;
}
.column (@width: 100%) when not (isunit(@width, '')) {
	width: @width;
}
.column (@share; @columns: @gridColumns) when (isunit(@share, '')) {
	width: ((100% / @columns) * @share);
}
.column (spaced; @share; @columns: @gridColumns; @margin: @gridMargin) {
	margin-left: @margin;
	width: (((100% / @columns) * @share) - (@margin));
}
.columnModify (@share; @columns: @gridColumns) {
	width: ((100% / @columns) * @share);
}
.columnModify (spaced; @share; @columns: @gridColumns; @margin: @gridMargin) {
	margin-left: @margin;
	width: (((100% / @columns) * @share) - (@margin));
}
.columnModify (@width) when not (isunit(@width, '')) {
	width: @width;
}
.columnReset (@resetMargin: false) {
	float: none;
	width: auto;
	.check () when (@resetMargin = true) {
		margin-left: 0;
	}
	.check();
}
.columnPull (@share; @columns: @gridColumns) {
	position: relative;
	right: ((100% / @columns) * @share);
}
.columnPush (@share; @columns: @gridColumns) {
	left: ((100% / @columns) * @share);
	position: relative;
}
.columnOffset (@share; @columns: @gridColumns) {
	margin-left: ((100% / @columns) * @share);
}
.columnOffset (spaced; @share; @columns: @gridColumns; @margin: (@gridMargin / 2)) {
	margin-left: (((100% / @columns) * @share) + (@margin * 2));
}






/*------------------------------------*\
	# Inline Grid
\*------------------------------------*/

.inlineRow (@margin: @gridMargin; ...) {
	.row(@margin);
}
.inlineRow (@margin: @gridMargin; @spaceless: @gridSpaceless) when not (@spaceless = true) {
	letter-spacing: -.32em;
}
.fabGrid (@marginLeft: @gridMargin) when not (@marginLeft = 0) {
	margin-left: @marginLeft;
}
.fabGrid (@marginLeft: @gridMargin; ...) {
	display: inline-block;
	vertical-align: top;
}
.fabGrid (@marginLeft; @spaceless: @gridSpaceless) when not (@spaceless = true) {
	letter-spacing: normal;
}
.inlineColumn (@share; @columns: @gridColumns; ...) when (isunit(@share, '')) {
	width: ((100% / @columns) * @share);
	.fabGrid(0);
}
.inlineColumn (@share; @columns; @spaceless: @gridSpaceless) when (isunit(@share, ''))
		and not (@spaceless = true) {
	margin-right: -.32em;
}
.inlineColumn (spaced; @share; @columns: @gridColumns; @margin: @gridMargin; @spaceless: false) {
	margin-left: @margin;
	width: (((100% / @columns) * @share) - (@margin));
	.fabGrid(@margin; @spaceless);
}
